tosca_definitions_version: tosca_simple_yaml_1_3

description: >
  TOSCA blueprint for deploying a secure web server hosting a website on port 80,
  with files in a specific directory, restricted to a private network, management lifecycle operations,
  and health-check of the welcome page.

imports:
  - tosca-normative-types:1.0.0

topology_template:
  node_templates:
    web_server_host:
      type: tosca.nodes.Compute
      capabilities:
        host:
          properties:
            num_cpus: 2
            disk_size: 10 GB
            mem_size: 4096 MB
      properties:
        os_distribution: ubuntu
        os_version: 20.04
        os_type: linux

    web_private_network:
      type: tosca.nodes.network.Network
      properties:
        network_name: private_net
        ip_version: 4

    web_network_port:
      type: tosca.nodes.network.Port
      properties:
        ip_address: 192.168.56.10
      requirements:
        - network: web_private_network
        - binding: web_server_host

    web_app:
      type: tosca.nodes.WebApplication
      properties:
        admin_credential:
          user: webadmin
          token: changeme
        install_dir: /var/www/mywebsite
        port: 80
        website_root: /var/www/mywebsite
      requirements:
        - host: web_server_host

    web_server:
      type: tosca.nodes.WebServer
      properties:
        port: 80
        document_root: /var/www/mywebsite
        secure: true
      requirements:
        - host: web_server_host
        - dependency: web_app
        - network: web_network_port

    web_firewall:
      type: tosca.nodes.network.SecurityGroup
      properties:
        name: web_secgroup
        description: >-
          Security Group to allow HTTP only within private network.
        rules:
          - protocol: tcp
            port_range_min: 80
            port_range_max: 80
            remote_ip_prefix: 192.168.56.0/24

      requirements:
        - target: web_server_host

    web_health_check:
      type: tosca.nodes.Monitoring
      properties:
        url: http://192.168.56.10/
        expected_status: 200
        expected_content: "Welcome"
        interval: 60
      requirements:
        - host: web_server_host

  outputs:
    web_server_ip:
      value: { get_attribute: [ web_network_port, ip_address ] }
      description: Web server IP within the private network.
    health_check_status:
      value: { get_attribute: [ web_health_check, status ] }
      description: Status of the website welcome page.

  workflows:
    start_web_server:
      steps:
        start_service:
          target: web_server
          activities:
            - call_operation: Standard.start

    stop_web_server:
      steps:
        stop_service:
          target: web_server
          activities:
            - call_operation: Standard.stop

    restart_web_server:
      steps:
        restart_service:
          target: web_server
          activities:
            - call_operation: Standard.restart
