tosca_definitions_version: tosca_simple_yaml_1_0

topology_template:
  description: Galaxy application deployment on a single VM with MySQL database and encryption

  input_parameters:
    admin_email:
      type: string
      description: Email address for the admin user
    api_key:
      type: string
      description: API key for authentication
    instance_flavor:
      type: string
      description: Flavor of the instance
      default: medium
    storage_size:
      type: integer
      description: Size of the storage volume in GB
      default: 50
    reference_data:
      type: boolean
      description: Whether to install reference data
      default: true

  node_templates:
    galaxy_vm:
      type: Compute
      properties:
        flavor: { get_input: instance_flavor }
        storage_size: { get_input: storage_size }
        admin_email: { get_input: admin_email }
        api_key: { get_input: api_key }

    galaxy_container:
      type: Docker.Application
      properties:
        image: galaxy:latest
        environment:
          GALAXY_ADMIN_EMAIL: { get_input: admin_email }
          GALAXY_API_KEY: { get_input: api_key }
      dependencies:
        - host: galaxy_vm

    mysql_db:
      type: MySQL.Database
      properties:
        database_name: galaxy_db
        database_user: galaxy_user
        database_password: { get_secret: mysql_password }
        storage_size: { get_input: storage_size }
        encrypted: true
      dependencies:
        - host: galaxy_vm

    encrypted_storage:
      type: Storage.Encrypted
      properties:
        storage_size: { get_input: storage_size }
        encryption_key: { get_secret: encryption_key }
      dependencies:
        - host: galaxy_vm

    reference_data_install:
      type: Operations.Script
      properties:
        script: |
          if [ { get_input: reference_data } ]; then
            echo "Installing reference data..."
            # Add reference data installation commands here
          fi
      dependencies:
        - host: galaxy_vm
        - db: mysql_db

  outputs:
    vm_ip:
      description: Public IP of the VM
      value: { get_attribute: [galaxy_vm, public_ip] }
    db_connection:
      description: Database connection details
      value: { get_attribute: [mysql_db, connection] }
