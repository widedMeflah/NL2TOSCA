tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/custom_types.yaml

description: INDIGO Galaxy deployment with SLURM support

topology_template:
  inputs:
    admin_email:
      type: string
      description: Email for Galaxy admin notifications
      required: true
    storage_size:
      type: integer
      default: 100
      description: Storage size in GB
    num_worker_nodes:
      type: integer
      default: 1
      description: Initial number of worker nodes

  node_templates:
    galaxy:
      type: tosca.nodes.indigo.Galaxy
      properties:
        admin_email: { get_input: admin_email }
        version: "latest"
        instance_description: "Galaxy Production Instance"
        storage_encryption: true
      requirements:
        - host: galaxy_server

    galaxy_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        host:
          properties:
            num_cpus: 4
            mem_size: 8 GB
        os:
          properties:
            type: linux
            distribution: centos
            version: 7

    slurm_server:
      type: tosca.nodes.indigo.SLURM.Server
      requirements:
        - host: galaxy_server

    worker_node:
      type: tosca.nodes.indigo.SLURM.Worker
      properties:
        front_end_ip: { get_attribute: [ galaxy_server, private_address ] }
      capabilities:
        scalable:
          properties:
            count: { get_input: num_worker_nodes }
            max_instances: 5
            min_instances: 1
      requirements:
        - host: worker_server

    worker_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        host:
          properties:
            num_cpus: 2
            mem_size: 4 GB
        os:
          properties:
            type: linux
            distribution: centos
            version: 7

  outputs:
    galaxy_url:
      value: { concat: [ 'http://', get_attribute: [ galaxy_server, public_address ], '/galaxy' ] }
    cluster_creds:
      value: { get_attribute: [ galaxy_server, endpoint, credential, 0 ] }