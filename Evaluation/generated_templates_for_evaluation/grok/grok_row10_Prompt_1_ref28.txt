tosca_definitions_version: tosca_simple_yaml_1_2

description: TOSCA template for deploying a search engine service on a virtual machine using INDIGO orchestrator.

imports:
  - indigo_custom_types: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/custom_types.yaml

topology_template:
  inputs:
    num_cpus:
      type: integer
      description: Number of virtual CPUs for the VM
      default: 2
      constraints:
        - valid_values: [2, 4]
    mem_size:
      type: string
      description: Memory size for the VM
      default: "4 GB"
      constraints:
        - valid_values: ["4 GB", "8 GB"]
    search_engine_version:
      type: string
      description: Version of the search engine
      default: "7.4.1"
    main_user_password:
      type: string
      description: Password for the main user of the search engine
      default: "default_main_password"
    system_ui_password:
      type: string
      description: Password for the system user interface
      default: "default_system_password"

  node_templates:
    search_engine_vm:
      type: indigo.Compute
      properties:
        num_cpus: { get_input: num_cpus }
        mem_size: { get_input: mem_size }
        os_type: linux
        os_distribution: ubuntu
        os_version: "16.04"
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            ports:
              http_port:
                protocol: tcp
                source: 9200
      requirements:
        - host:
            node: search_engine_service
            relationship: tosca.relationships.HostedOn

    search_engine_service:
      type: tosca.nodes.SoftwareComponent
      properties:
        component_version: { get_input: search_engine_version }
      requirements:
        - host:
            node: search_engine_vm
            relationship: tosca.relationships.HostedOn
      interfaces:
        Standard:
          configure:
            implementation: scripts/configure_search_engine.sh
            inputs:
              main_user_password: { get_input: main_user_password }
              system_ui_password: { get_input: system_ui_password }
          start:
            implementation: scripts/start_search_engine.sh

  outputs:
    search_engine_access_url:
      description: URL to access the search engine
      value: { concat: ["http://", get_attribute: [search_engine_vm, public_ip_address], ":9200"] }
    main_user_credentials:
      description: Credentials for the main user
      value: { concat: ["Username: admin, Password: ", get_input: main_user_password] }
    system_ui_credentials:
      description: Credentials for the system UI
      value: { concat: ["Username: system_admin, Password: ", get_input: system_ui_password] }