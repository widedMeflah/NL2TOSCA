tosca_definitions_version: tosca_simple_yaml_1_3

description: TOSCA description for deploying a virtual elastic cluster with Galaxy Portal and Slurm LRMS using INDIGO orchestrator.

imports:
  - file: indigo_custom_types.yaml

topology_template:
  inputs:
    num_cpus_frontend:
      type: integer
      description: Number of CPUs for the LRMS frontend
      default: 4
    mem_size_frontend:
      type: string
      description: Memory size for the LRMS frontend
      default: "8 GB"
    num_cpus_worker:
      type: integer
      description: Number of CPUs for worker nodes
      default: 2
    mem_size_worker:
      type: string
      description: Memory size for worker nodes
      default: "4 GB"
    max_worker_instances:
      type: integer
      description: Maximum number of worker node instances
      default: 10
    galaxy_admin_email:
      type: string
      description: Admin email for Galaxy Portal
      default: "admin@example.com"
    galaxy_api_key:
      type: string
      description: API key for Galaxy Portal management
      default: "default_api_key"
    galaxy_export_dir:
      type: string
      description: Export directory for Galaxy worker nodes
      default: "/data/galaxy_export"

  node_templates:
    elastic_cluster_frontend:
      type: indigo.ElasticClusterFrontend
      properties:
        workload_management_systems:
          - Torque
          - SGE
          - Slurm
          - Condor
        hybrid_environment: true
      requirements:
        - host: lrms_frontend_server

    galaxy_portal:
      type: indigo.GalaxyPortal
      properties:
        version: latest
        admin_email: { get_input: galaxy_admin_email }
        api_key: { get_input: galaxy_api_key }
        description: "Galaxy Portal for bioinformatics applications"
      requirements:
        - host: galaxy_server
        - dependency: elastic_cluster_frontend

    lrms_frontend_server:
      type: indigo.Compute
      properties:
        image: ubuntu-14.04
        num_cpus: { get_input: num_cpus_frontend }
        mem_size: { get_input: mem_size_frontend }
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            dns_name: lrms-frontend
            public_ip: true

    lrms_frontend:
      type: indigo.SlurmFrontend
      requirements:
        - host: lrms_frontend_server
        - dependency: elastic_cluster_frontend

    compute_node:
      type: indigo.Compute
      properties:
        image: ubuntu-14.04
        num_cpus: { get_input: num_cpus_worker }
        mem_size: { get_input: mem_size_worker }
      capabilities:
        endpoint:
          properties:
            network_name: PRIVATE

    worker_nodes:
      type: indigo.SlurmWorker
      properties:
        max_instances: { get_input: max_worker_instances }
      requirements:
        - host: compute_node
        - dependency: lrms_frontend
      capabilities:
        scalable:
          properties:
            count: 2
            min_instances: 1
            max_instances: { get_input: max_worker_instances }

    galaxy_server:
      type: indigo.Compute
      properties:
        image: ubuntu-14.04
        num_cpus: { get_input: num_cpus_frontend }
        mem_size: { get_input: mem_size_frontend }
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            dns_name: galaxy-portal
            public_ip: true

    galaxy_worker_nodes:
      type: indigo.GalaxyWorker
      properties:
        export_directory: { get_input: galaxy_export_dir }
      requirements:
        - host: compute_node
        - dependency: galaxy_portal
      capabilities:
        scalable:
          properties:
            count: 2
            min_instances: 1
            max_instances: { get_input: max_worker_instances }

  outputs:
    galaxy_url:
      description: URL to access the Galaxy Portal
      value: { get_attribute: [galaxy_server, endpoint, public_address] }
    cluster_ip:
      description: Public IP of the cluster frontend
      value: { get_attribute: [lrms_frontend_server, endpoint, public_address] }
    cluster_credentials:
      description: Credentials for cluster access
      value: { get_attribute: [elastic_cluster_frontend, credentials] }